name: Rust Release

# 定义工作流触发条件，这里是当有新标签被推送到仓库时，并且标签名匹配模式 'v*'
on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    # 使用矩阵策略为多个目标平台构建项目
    strategy:
      matrix:
        target: [x86_64-unknown-linux-gnu, x86_64-unknown-linux-musl]
    runs-on: ubuntu-20.04 # 指定运行环境

    # 构建步骤
    steps:
      - name: Checkout source
        uses: actions/checkout@v2 # 检出代码

      - name: Install dependencies
        run: |
          # 更换 Ubuntu 软件源为阿里云，加速下载速度
          sudo sed -i "s#archive.ubuntu.com#mirrors.aliyun.com#g" /etc/apt/sources.list
          sudo sed -i "s#security.ubuntu.com#mirrors.aliyun.com#g" /etc/apt/sources.list
          sudo apt-get update && sudo apt-get install -y musl-tools

      - name: Setup Rust environment
        uses: actions-rs/toolchain@v1 # 设置 Rust 工具链
        with:
          profile: minimal # 选择最小化配置
          toolchain: stable # 使用稳定版的工具链
          target: ${{ matrix.target }} # 使用矩阵中定义好的目标平台
          override: true

      - name: Build and rename
        run: |
          # 构建项目
          cargo build --release --target ${{ matrix.target }}
          # 给构建的二进制文件重命名，避免混淆
          output_file=clash_config_manager-${{ matrix.target }}
          mv target/${{ matrix.target }}/release/clash_config_manager target/${{ matrix.target }}/release/$output_file

      - name: Upload artifact
        uses: actions/upload-artifact@v2 # 上传构建成果为 artifact 以供后续步骤使用
        with:
          name: clash_config_manager-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/clash_config_manager-${{ matrix.target }}

  release:
    needs: build  # 此 job 需要等待 build job 完成
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout source
        uses: actions/checkout@v2 # 再次检出代码

      - name: Download all artifacts
        uses: actions/download-artifact@v2
        with:
          path: release-assets # 将 artifacts 下载到‘release-assets’目录

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.RELEASE_GITHUB_TOKEN }}
          tag_name: ${{ github.ref }}
          name: ${{ github.ref }}
          body: "新的发布版本"
          draft: false
          prerelease: false
          files: ./release-assets/* # 附加'release-assets'目录下的所有文件到发布版本